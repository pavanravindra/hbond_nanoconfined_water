import numpy as np

# Gets average number of hydrogen bonds (donated + accepted) for all specified structures

path = "../raw_thermo/{}_H_bond_dict.npy"
struct_names = ["r2", "h", "p", "big_r2", "liq_h", "hexatic"]

NUM_FRAMES = 800
NUM_BLOCKS = 10

for s in struct_names:

    Ts = [str(20*(i+1)) for i in range(30)]
    data = np.ones((30,3)) * np.inf
    data[:,0] = Ts

    H_bond_dict = np.load(path.format(s), allow_pickle=True).item()

    for (i,T) in enumerate(Ts):

        try:

            traj, O_bonds, H_bonds = H_bond_dict[T]

            traj = traj[-NUM_FRAMES:]
            blocks = np.array_split(traj, NUM_BLOCKS)
            block_sq_means = np.array([np.mean(block ** 2.0) for block in blocks])
            block_mean = np.array([np.mean(block) for block in blocks])
            std_mean = np.sqrt(np.sum(block_sq_means - block_mean ** 2.0) / (NUM_BLOCKS - 1))

            data[i,1] = np.average(traj)
            data[i,2] = std_mean

        except Exception as e:
            print(e)
            continue;

    header = "struct {} (generated by `number.py`): \t Temp. \t Mean # of H-bonds \t Error"
    writepath = "{}_nH_statistics.txt"
    np.savetxt(writepath.format(s), data, header=header.format(s))
